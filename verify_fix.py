"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

from datetime import timedelta
from app.auth import create_access_token, decode_access_token

def test_token_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    print("=" * 70)
    print("–ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º ID
    print("\n1Ô∏è‚É£ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º user_id")
    user_id = 4
    
    try:
        token = create_access_token(
            data={"sub": str(user_id)},
            expires_delta=timedelta(days=1)
        )
        print(f"   ‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   Token: {token[:50]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    print("\n2Ô∏è‚É£ –¢–ï–°–¢: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    try:
        payload = decode_access_token(token)
        if payload is None:
            print(f"   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è!")
            return False
        
        print(f"   ‚úÖ –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   Payload: {payload}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sub - —Å—Ç—Ä–æ–∫–∞
        sub = payload.get("sub")
        print(f"   Sub value: {sub}")
        print(f"   Sub type: {type(sub).__name__}")
        
        if not isinstance(sub, str):
            print(f"   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: sub –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –Ω–æ —ç—Ç–æ {type(sub).__name__}")
        else:
            print(f"   ‚úÖ Sub —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
        try:
            user_id_int = int(sub)
            print(f"   ‚úÖ Sub –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int: {user_id_int}")
        except (ValueError, TypeError) as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è sub –≤ int: {e}")
            return False
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ ID
    print("\n3Ô∏è‚É£ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ user_id")
    test_ids = [1, 4, 5, 100, 999]
    
    for test_id in test_ids:
        try:
            token = create_access_token(
                data={"sub": str(test_id)},
                expires_delta=timedelta(days=1)
            )
            payload = decode_access_token(token)
            sub = payload.get("sub")
            recovered_id = int(sub)
            
            if recovered_id == test_id:
                print(f"   ‚úÖ ID {test_id}: OK")
            else:
                print(f"   ‚ùå ID {test_id}: –û–∂–∏–¥–∞–ª–æ—Å—å {test_id}, –ø–æ–ª—É—á–µ–Ω–æ {recovered_id}")
                return False
        except Exception as e:
            print(f"   ‚ùå ID {test_id}: –û—à–∏–±–∫–∞ - {e}")
            return False
    
    print("\n" + "=" * 70)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    print("=" * 70)
    print("\nüìù –í–´–í–û–î:")
    print("   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("   –¢–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –¥–µ–∫–æ–¥–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    print("   –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.")
    print("\nüîÑ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:")
    print("   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (Ctrl+C)")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: python run.py")
    print("   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ")
    
    return True


if __name__ == "__main__":
    success = test_token_fix()
    sys.exit(0 if success else 1)