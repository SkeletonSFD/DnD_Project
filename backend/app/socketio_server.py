"""
Socket.IO —Å–µ—Ä–≤–µ—Ä –¥–ª—è real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ D&D –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
"""
import socketio
from typing import Dict, Set
from app.auth import decode_access_token
from app.bd import SessionLocal
from app.crud import get_user_by_id

# –°–æ–∑–¥–∞–Ω–∏–µ Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
sio = socketio.AsyncServer(
    async_mode='asgi',
    cors_allowed_origins='*',  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    logger=True,
    engineio_logger=True
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–Ω–∞—Ç
active_users: Dict[str, dict] = {}  # sid -> user_info
game_rooms: Dict[str, Set[str]] = {}  # room_id -> set of sids


async def authenticate_socket(token: str) -> dict:
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –¥–ª—è Socket.IO
    
    Args:
        token: JWT —Ç–æ–∫–µ–Ω
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ None
    """
    payload = decode_access_token(token)
    if not payload:
        return None
    
    user_id = payload.get("sub")
    if not user_id:
        return None
    
    db = SessionLocal()
    try:
        user = get_user_by_id(db, user_id)
        if user and user.is_active:
            return {
                "id": user.id,
                "username": user.username,
                "character_name": user.character_name
            }
    finally:
        db.close()
    
    return None


@sio.event
async def connect(sid, environ, auth):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    """
    print(f"üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è: {sid}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not auth or 'token' not in auth:
        print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {sid}: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞")
        return False
    
    user_info = await authenticate_socket(auth['token'])
    if not user_info:
        print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {sid}: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    active_users[sid] = user_info
    
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: {user_info['username']} (sid: {sid})")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await sio.emit('connected', {
        'message': f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['username']}!",
        'user': user_info
    }, to=sid)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await sio.emit('user_joined', {
        'username': user_info['username'],
        'character_name': user_info['character_name']
    }, skip_sid=sid)
    
    return True


@sio.event
async def disconnect(sid):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    """
    if sid in active_users:
        user_info = active_users[sid]
        print(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {user_info['username']} (sid: {sid})")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
        for room_id, members in game_rooms.items():
            if sid in members:
                members.remove(sid)
                await sio.emit('user_left_room', {
                    'username': user_info['username'],
                    'room_id': room_id
                }, room=room_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        await sio.emit('user_left', {
            'username': user_info['username']
        })
        
        del active_users[sid]
    else:
        print(f"üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {sid}")


@sio.event
async def join_room(sid, data):
    """
    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    """
    if sid not in active_users:
        return {'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
    
    room_id = data.get('room_id')
    if not room_id:
        return {'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–æ–º–Ω–∞—Ç—ã'}
    
    user_info = active_users[sid]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
    if room_id not in game_rooms:
        game_rooms[room_id] = set()
    
    game_rooms[room_id].add(sid)
    sio.enter_room(sid, room_id)
    
    print(f"üö™ {user_info['username']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
    await sio.emit('user_joined_room', {
        'username': user_info['username'],
        'character_name': user_info['character_name'],
        'room_id': room_id
    }, room=room_id, skip_sid=sid)
    
    return {
        'success': True,
        'room_id': room_id,
        'members_count': len(game_rooms[room_id])
    }


@sio.event
async def leave_room(sid, data):
    """
    –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    """
    if sid not in active_users:
        return {'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
    
    room_id = data.get('room_id')
    if not room_id:
        return {'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–æ–º–Ω–∞—Ç—ã'}
    
    user_info = active_users[sid]
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    if room_id in game_rooms and sid in game_rooms[room_id]:
        game_rooms[room_id].remove(sid)
        sio.leave_room(sid, room_id)
        
        print(f"üö™ {user_info['username']} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É {room_id}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
        await sio.emit('user_left_room', {
            'username': user_info['username'],
            'room_id': room_id
        }, room=room_id)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
        if len(game_rooms[room_id]) == 0:
            del game_rooms[room_id]
        
        return {'success': True}
    
    return {'error': '–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ'}


@sio.event
async def send_message(sid, data):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    """
    if sid not in active_users:
        return {'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
    
    user_info = active_users[sid]
    room_id = data.get('room_id')
    message = data.get('message', '').strip()
    
    if not message:
        return {'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}
    
    message_data = {
        'username': user_info['username'],
        'character_name': user_info['character_name'],
        'message': message,
        'timestamp': data.get('timestamp')
    }
    
    if room_id:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
        await sio.emit('chat_message', message_data, room=room_id)
        print(f"üí¨ [{room_id}] {user_info['username']}: {message}")
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º
        await sio.emit('chat_message', message_data)
        print(f"üí¨ [–û–±—â–∏–π —á–∞—Ç] {user_info['username']}: {message}")
    
    return {'success': True}


@sio.event
async def dice_roll(sid, data):
    """
    –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    """
    if sid not in active_users:
        return {'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
    
    user_info = active_users[sid]
    room_id = data.get('room_id')
    dice_type = data.get('dice_type', 'd20')  # d4, d6, d8, d10, d12, d20, d100
    result = data.get('result')
    
    roll_data = {
        'username': user_info['username'],
        'character_name': user_info['character_name'],
        'dice_type': dice_type,
        'result': result,
        'timestamp': data.get('timestamp')
    }
    
    if room_id:
        await sio.emit('dice_rolled', roll_data, room=room_id)
        print(f"üé≤ [{room_id}] {user_info['username']} –±—Ä–æ—Å–∏–ª {dice_type}: {result}")
    else:
        await sio.emit('dice_rolled', roll_data)
        print(f"üé≤ {user_info['username']} –±—Ä–æ—Å–∏–ª {dice_type}: {result}")
    
    return {'success': True}


@sio.event
async def get_online_users(sid, data):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if sid not in active_users:
        return {'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
    
    room_id = data.get('room_id')
    
    if room_id and room_id in game_rooms:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
        users = [
            active_users[user_sid]
            for user_sid in game_rooms[room_id]
            if user_sid in active_users
        ]
    else:
        # –í—Å–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        users = list(active_users.values())
    
    return {
        'users': users,
        'count': len(users)
    }


# –≠–∫—Å–ø–æ—Ä—Ç Socket.IO –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
socketio_app = socketio.ASGIApp(
    sio,
    socketio_path='socket.io'
)