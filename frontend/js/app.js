/**
 * –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è D&D
 */

let socket = null;
let currentRoom = null;
let currentUser = null;
let userRole = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    checkAuth();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userRole = localStorage.getItem('dnd_user_role');
    if (!userRole) {
        // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
        window.location.href = 'role-select.html';
        return;
    }
    
    console.log('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userRole);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    setupRoleBasedUI();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currentUser = Storage.getUser();
    if (!currentUser) {
        try {
            currentUser = await API.get(API_CONFIG.ENDPOINTS.ME);
            Storage.setUser(currentUser);
        } catch (error) {
            console.error('Failed to get user data:', error);
            logout();
            return;
        }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById('username').textContent = currentUser.username;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Socket.IO
    initSocket();
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.getElementById('messageForm').addEventListener('submit', sendMessage);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
function initSocket() {
    const token = Storage.getToken();
    
    socket = io(API_CONFIG.SOCKET_URL, {
        auth: {
            token: token
        },
        transports: ['websocket', 'polling']
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.IO
    socket.on('connect', () => {
        console.log('‚úÖ Connected to Socket.IO');
        showConnectionStatus('connected');
    });
    
    socket.on('disconnect', () => {
        console.log('‚ùå Disconnected from Socket.IO');
        showConnectionStatus('disconnected');
    });
    
    socket.on('connect_error', (error) => {
        console.error('Connection error:', error);
        showConnectionStatus('disconnected');
    });
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
    socket.on('rooms_list', (data) => {
        updateRoomsList(data.rooms);
    });
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('room_joined', (data) => {
        currentRoom = data.room;
        document.getElementById('currentRoom').textContent = `–ö–æ–º–Ω–∞—Ç–∞: ${data.room}`;
        document.getElementById('messageInput').disabled = false;
        document.querySelector('#messageForm button').disabled = false;
        
        // –û—á–∏—â–∞–µ–º —á–∞—Ç
        document.getElementById('messagesArea').innerHTML = '';
        
        addSystemMessage(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ "${data.room}"`);
    });
    
    // –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    socket.on('room_left', (data) => {
        if (currentRoom === data.room) {
            currentRoom = null;
            document.getElementById('currentRoom').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É';
            document.getElementById('messageInput').disabled = true;
            document.querySelector('#messageForm button').disabled = true;
        }
    });
    
    // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    socket.on('new_message', (data) => {
        addMessage(data);
    });
    
    // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    socket.on('system_message', (data) => {
        addSystemMessage(data.message);
    });
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
    socket.on('dice_result', (data) => {
        showDiceResult(data);
    });
    
    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
    socket.on('users_online', (data) => {
        updateOnlineUsers(data.users);
    });
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
    setTimeout(() => {
        socket.emit('get_rooms');
    }, 500);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function showConnectionStatus(status) {
    let existingStatus = document.querySelector('.connection-status');
    if (existingStatus) {
        existingStatus.remove();
    }
    
    const statusDiv = document.createElement('div');
    statusDiv.className = `connection-status ${status}`;
    
    const statusText = {
        connected: 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
        disconnected: 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ',
        connecting: 'üü° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'
    };
    
    statusDiv.textContent = statusText[status] || statusText.connecting;
    document.body.appendChild(statusDiv);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (status === 'connected') {
        setTimeout(() => {
            statusDiv.remove();
        }, 3000);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
function updateRoomsList(rooms) {
    const roomsList = document.getElementById('roomsList');
    
    if (!rooms || rooms.length === 0) {
        roomsList.innerHTML = '<div class="text-center text-amber-900 text-sm">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</div>';
        return;
    }
    
    roomsList.innerHTML = rooms.map(room => `
        <div class="room-item ${currentRoom === room.name ? 'active' : ''}" onclick="joinRoom('${room.name}')">
            <div class="room-name">${room.name}</div>
            <div class="room-users">üë• ${room.users} ${getUsersWord(room.users)}</div>
        </div>
    `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
function updateOnlineUsers(users) {
    const onlineUsers = document.getElementById('onlineUsers');
    
    if (!users || users.length === 0) {
        onlineUsers.innerHTML = '<div class="text-center text-amber-900 text-sm">–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω</div>';
        return;
    }
    
    onlineUsers.innerHTML = users.map(user => `
        <div class="user-item">
            <div class="user-status"></div>
            <div class="user-name">${user}</div>
        </div>
    `).join('');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
function createRoom() {
    const roomName = document.getElementById('roomNameInput').value.trim();
    
    if (!roomName) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã');
        return;
    }
    
    if (roomName.length < 3) {
        alert('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
        return;
    }
    
    socket.emit('create_room', { room: roomName });
    document.getElementById('roomNameInput').value = '';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
    setTimeout(() => {
        joinRoom(roomName);
    }, 500);
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
function joinRoom(roomName) {
    if (currentRoom === roomName) {
        return;
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥–∏–º
    if (currentRoom) {
        socket.emit('leave_room', { room: currentRoom });
    }
    
    socket.emit('join_room', { room: roomName });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage(event) {
    event.preventDefault();
    
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    
    if (!message || !currentRoom) {
        return;
    }
    
    socket.emit('send_message', {
        room: currentRoom,
        message: message
    });
    
    messageInput.value = '';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(data) {
    const messagesArea = document.getElementById('messagesArea');
    const isOwnMessage = data.username === currentUser.username;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message-item ${isOwnMessage ? 'own-message' : ''}`;
    
    const time = new Date(data.timestamp || Date.now()).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });
    
    messageDiv.innerHTML = `
        <div class="flex justify-between items-start">
            <span class="message-author">${data.username}</span>
            <span class="message-time">${time}</span>
        </div>
        <div class="message-text">${escapeHtml(data.message)}</div>
    `;
    
    messagesArea.appendChild(messageDiv);
    messagesArea.scrollTop = messagesArea.scrollHeight;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function addSystemMessage(message) {
    const messagesArea = document.getElementById('messagesArea');
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message-item system-message';
    messageDiv.innerHTML = `<div class="message-text">${escapeHtml(message)}</div>`;
    
    messagesArea.appendChild(messageDiv);
    messagesArea.scrollTop = messagesArea.scrollHeight;
}

// –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
function rollDice(sides) {
    if (!currentRoom) {
        alert('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤');
        return;
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è
    const diceResult = document.getElementById('diceResult');
    diceResult.className = 'dice-rolling mt-4 text-center text-xl font-bold text-amber-900';
    diceResult.textContent = 'üé≤';
    
    socket.emit('roll_dice', {
        room: currentRoom,
        sides: sides
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
function showDiceResult(data) {
    const diceResult = document.getElementById('diceResult');
    diceResult.className = 'mt-4 text-center text-xl font-bold text-amber-900';
    diceResult.textContent = `üé≤ ${data.username} –±—Ä–æ—Å–∏–ª d${data.sides}: ${data.result}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    addSystemMessage(`üé≤ ${data.username} –±—Ä–æ—Å–∏–ª d${data.sides} –∏ –≤—ã–ø–∞–ª–æ: ${data.result}`);
    
    // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        diceResult.textContent = '';
    }, 5000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getUsersWord(count) {
    if (count % 10 === 1 && count % 100 !== 11) {
        return '–∏–≥—Ä–æ–∫';
    } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
        return '–∏–≥—Ä–æ–∫–∞';
    } else {
        return '–∏–≥—Ä–æ–∫–æ–≤';
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
 */
function setupRoleBasedUI() {
    const role = localStorage.getItem('dnd_user_role');
    const roomCode = localStorage.getItem('dnd_room_code');
    
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–ª—è —Ä–æ–ª–∏:', role, '–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:', roomCode);
    
    if (role === 'player') {
        // –î–ª—è –∏–≥—Ä–æ–∫–∞: —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
        const createRoomSection = document.querySelector('#roomNameInput').parentElement;
        if (createRoomSection) {
            createRoomSection.style.display = 'none';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const roomsPanel = document.querySelector('#roomsList').parentElement;
        const infoDiv = document.createElement('div');
        infoDiv.className = 'bg-blue-100 border-2 border-blue-600 rounded p-3 mb-4 text-sm text-blue-900';
        infoDiv.innerHTML = `
            <strong>üó°Ô∏è –†–µ–∂–∏–º –∏–≥—Ä–æ–∫–∞</strong><br>
            –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–º–Ω–∞—Ç–∞–º
        `;
        roomsPanel.insertBefore(infoDiv, roomsPanel.firstChild);
    } else if (role === 'master') {
        // –î–ª—è –º–∞—Å—Ç–µ—Ä–∞: –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const roomsPanel = document.querySelector('#roomsList').parentElement;
        const infoDiv = document.createElement('div');
        infoDiv.className = 'bg-red-100 border-2 border-red-600 rounded p-3 mb-4 text-sm text-red-900';
        infoDiv.innerHTML = `
            <strong>üé≠ –†–µ–∂–∏–º –º–∞—Å—Ç–µ—Ä–∞</strong><br>
            –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–Ω–∞—Ç–∞–º–∏
        `;
        roomsPanel.insertBefore(infoDiv, roomsPanel.firstChild);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–µ–π
        if (roomCode) {
            console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomCode);
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ socket
            setTimeout(() => {
                if (socket && socket.connected) {
                    socket.emit('create_room', { room: roomCode });
                    setTimeout(() => {
                        joinRoom(roomCode);
                    }, 500);
                }
            }, 1000);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const nav = document.querySelector('.medieval-nav .container > div:last-child');
    const changeRoleBtn = document.createElement('button');
    changeRoleBtn.textContent = '–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å';
    changeRoleBtn.className = 'medieval-button-small px-4 py-2 rounded mr-2';
    changeRoleBtn.onclick = () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å? –í—ã –≤—ã–π–¥–µ—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã.')) {
            localStorage.removeItem('dnd_user_role');
            localStorage.removeItem('dnd_room_code');
            window.location.href = 'role-select.html';
        }
    };
    nav.insertBefore(changeRoleBtn, nav.firstChild);
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
window.createRoom = createRoom;
window.joinRoom = joinRoom;
window.rollDice = rollDice;