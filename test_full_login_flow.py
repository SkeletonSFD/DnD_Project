"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç flow –ª–æ–≥–∏–Ω–∞: login -> –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ -> –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import requests
import json

BASE_URL = "http://localhost:8000"

def test_full_login_flow():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("=" * 70)
    print("–ü–û–õ–ù–´–ô –¢–ï–°–¢ –õ–û–ì–ò–ù–ê")
    print("=" * 70)
    
    username = "SFDSkeleton"
    password = "Irina25011965"
    
    print(f"\n1Ô∏è‚É£ –®–ê–ì 1: –õ–û–ì–ò–ù")
    print(f"   Username: {username}")
    print(f"   Password: {password}")
    
    # –®–∞–≥ 1: –õ–æ–≥–∏–Ω
    form_data = {
        'username': username,
        'password': password
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/users/login",
            data=form_data,
            headers={
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        )
        
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code != 200:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê –õ–û–ì–ò–ù–ê!")
            print(f"   Response: {response.text}")
            return False
        
        login_data = response.json()
        access_token = login_data['access_token']
        
        print(f"   ‚úÖ –õ–û–ì–ò–ù –£–°–ü–ï–®–ï–ù!")
        print(f"   Token: {access_token[:50]}...")
        print(f"   User ID: {login_data['user']['id']}")
        print(f"   Username: {login_data['user']['username']}")
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n2Ô∏è‚É£ –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
        print(f"   Endpoint: /api/users/me")
        print(f"   Authorization: Bearer {access_token[:30]}...")
        
        response2 = requests.get(
            f"{BASE_URL}/api/users/me",
            headers={
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
        )
        
        print(f"   Status Code: {response2.status_code}")
        
        if response2.status_code != 200:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•!")
            print(f"   Response: {response2.text}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
            print(f"\nüîç –û–¢–õ–ê–î–ö–ê –¢–û–ö–ï–ù–ê:")
            import base64
            try:
                # JWT —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∞—Å—Ç–µ–π: header.payload.signature
                parts = access_token.split('.')
                if len(parts) == 3:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
                    payload = parts[1]
                    # –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    padding = 4 - len(payload) % 4
                    if padding != 4:
                        payload += '=' * padding
                    
                    decoded = base64.urlsafe_b64decode(payload)
                    print(f"   Payload: {decoded.decode('utf-8')}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            return False
        
        user_data = response2.json()
        
        print(f"   ‚úÖ –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´!")
        print(f"   User ID: {user_data['id']}")
        print(f"   Username: {user_data['username']}")
        print(f"   Email: {user_data['email']}")
        print(f"   Character Name: {user_data.get('character_name', 'None')}")
        
        print(f"\n{'=' * 70}")
        print(f"‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"{'=' * 70}")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {BASE_URL}")
        return False
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    test_full_login_flow()